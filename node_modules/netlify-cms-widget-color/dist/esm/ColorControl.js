var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React from 'react';
import ImmutablePropTypes from 'react-immutable-proptypes';
import SketchPicker from 'react-color/lib/Sketch';

var DEFAULT_FORMAT = 'hex';
var DEFAULT_COLOR = '#ffffff';

var ColorControl = function (_React$Component) {
  _inherits(ColorControl, _React$Component);

  function ColorControl() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ColorControl);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ColorControl.__proto__ || Object.getPrototypeOf(ColorControl)).call.apply(_ref, [this].concat(args))), _this), _this.format = _this.props.field.get('format') || DEFAULT_FORMAT, _this.alpha = !_this.props.field.get('alpha', true), _this.handleChangeComplete = function (color) {
      var selected = color[_this.format];
      if (typeof selected !== 'string') {
        var type = '' + _this.format + (_this.alpha ? 'a' : '');
        var value = Object.values(selected).join(', ');

        selected = type + '(' + value + ')';
      }
      _this.props.onChange(selected);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ColorControl, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          forID = _props.forID,
          field = _props.field,
          value = _props.value,
          classNameWrapper = _props.classNameWrapper,
          setActiveStyle = _props.setActiveStyle,
          setInactiveStyle = _props.setInactiveStyle;


      var props = {
        presetColors: undefined,
        color: value || field.get('default') || DEFAULT_COLOR,
        disableAlpha: !field.get('alpha', true)
      };

      if (field.has('presets')) {
        props.presetColors = field.get('presets').toArray();
      }

      return React.createElement(
        'div',
        {
          id: forID,
          className: classNameWrapper,
          onFocus: setActiveStyle,
          onBlur: setInactiveStyle,
          style: { borderColor: value }
        },
        React.createElement(SketchPicker, _extends({
          onChangeComplete: this.handleChangeComplete
        }, props))
      );
    }
  }]);

  return ColorControl;
}(React.Component);

ColorControl.propTypes = {
  onChange: PropTypes.func.isRequired,
  field: ImmutablePropTypes.mapContains({
    format: PropTypes.oneOf(['hex', 'rgb', 'hsl']),
    default: PropTypes.string,
    presets: ImmutablePropTypes.list,
    alpha: PropTypes.bool
  }),
  forID: PropTypes.string,
  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  classNameWrapper: PropTypes.string.isRequired,
  setActiveStyle: PropTypes.func.isRequired,
  setInactiveStyle: PropTypes.func.isRequired
};
ColorControl.defaultProps = {
  value: ''
};
export default ColorControl;